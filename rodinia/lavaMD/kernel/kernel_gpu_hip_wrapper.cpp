//========================================================================================================================================================================================================200
//      DEFINE/INCLUDE
//========================================================================================================================================================================================================200

//======================================================================================================================================================150
//      MAIN FUNCTION HEADER
//======================================================================================================================================================150
#include "hip/hip_runtime.h"
#include "./../main.h"                                          // (in the main program folder) needed to recognized input parameters
#include <gem5/m5ops.h>
//======================================================================================================================================================150
//      UTILITIES
//======================================================================================================================================================150
#include "./../util/device/device.h"                            // (in library path specified to compiler)      needed by for device functions
#include "./../util/timer/timer.h"                              // (in library path specified to compiler)      needed by timer

//======================================================================================================================================================150
//      KERNEL_GPU_HIP_WRAPPER FUNCTION HEADER
//======================================================================================================================================================150
#include "./kernel_gpu_hip_wrapper.h"                          // (in the current directory)

//======================================================================================================================================================150
//      KERNEL
//======================================================================================================================================================150
#include "./kernel_gpu_hip.h"                                  // (in the current directory)   GPU kernel, cannot include with header file because of complications with passing of constant memory variables

//========================================================================================================================================================================================================200
//      KERNEL_GPU_HIP_WRAPPER FUNCTION
//========================================================================================================================================================================================================200
void 
kernel_gpu_hip_wrapper(par_str par_cpu,
                       dim_str dim_cpu,
                       box_str* box_cpu,
                       FOUR_VECTOR* rv_cpu,
                       fp* qv_cpu,
                       FOUR_VECTOR* fv_cpu)
{
  //======================================================================================================================================================150
  //    CPU VARIABLES
  //======================================================================================================================================================150

  // timer
  long long time0;
  long long time1;
  long long time2;
  long long time3;
  long long time4;
  long long time5;
  long long time6;

  time0 = get_time();

  //======================================================================================================================================================150
  //    GPU SETUP
  //======================================================================================================================================================150

  //====================================================================================================100
  //    INITIAL DRIVER OVERHEAD
  //====================================================================================================100
  hipDeviceSynchronize();

  //====================================================================================================100
  //    VARIABLES
  //====================================================================================================100

  box_str** d_box_gpu;
  FOUR_VECTOR** d_rv_gpu;
  fp** d_qv_gpu;
  FOUR_VECTOR** d_fv_gpu;

  dim3 threads;
  dim3 blocks;

  //====================================================================================================100
  //    EXECUTION PARAMETERS
  //====================================================================================================100

  blocks.x = dim_cpu.number_boxes;
  blocks.y = 1;
  threads.x = NUMBER_THREADS;                                                                                   // define the number of threads in the block
  threads.y = 1;

  time1 = get_time();

  //======================================================================================================================================================150
  //    GPU MEMORY                              (MALLOC)
  //======================================================================================================================================================150

  //====================================================================================================100
  //    GPU MEMORY                              (MALLOC) COPY IN
  //====================================================================================================100

  //==================================================50
  //    boxes
  //==================================================50

  
  hipHostMalloc((void **)&d_box_gpu, sizeof(box_str*)*numStreams);

  for (int i = 0; i < numStreams; i++) {
    hipHostMalloc(    (void **)&d_box_gpu[i], dim_cpu.box_mem);
  }
  //==================================================50
  //    rv
  //==================================================50
hipHostMalloc(    (void **)&d_rv_gpu, sizeof(FOUR_VECTOR*)*numStreams);


  for (int i = 0; i < numStreams; i++) {
    hipHostMalloc(    (void **)&d_rv_gpu[i], dim_cpu.space_mem);
  }
  //==================================================50
  //    qv
  //==================================================50
  hipHostMalloc(    (void **)&d_qv_gpu, sizeof(fp*)*numStreams);
  for (int i = 0; i < numStreams; i++) {
  hipHostMalloc(    (void **)&d_qv_gpu[i], dim_cpu.space_mem2);
  }
  //====================================================================================================100
  //    GPU MEMORY                              (MALLOC) COPY
  //====================================================================================================100

  //==================================================50
  //    fv
  //==================================================50
hipHostMalloc(    (void **)&d_fv_gpu, sizeof(FOUR_VECTOR*)*numStreams);
  for (int i = 0; i < numStreams; i++) {
  hipHostMalloc(    (void **)&d_fv_gpu[i], dim_cpu.space_mem);
  }

  printf("initial done\n");
  time2 = get_time();

  //======================================================================================================================================================150
  //    GPU MEMORY                      COPY
  //======================================================================================================================================================150

  //====================================================================================================100
  //    GPU MEMORY                              (MALLOC) COPY IN
  //====================================================================================================100

  //==================================================50
  //    boxes
  //==================================================50
  for (int i = 0; i < numStreams; i++) {
  hipMemcpy(    d_box_gpu[i], 
                box_cpu,
                dim_cpu.box_mem, 
                hipMemcpyHostToDevice);

  //==================================================50
  //    rv
  //==================================================50
  hipMemcpy(    d_rv_gpu[i],
                rv_cpu,
                dim_cpu.space_mem,
                hipMemcpyHostToDevice);

  //==================================================50
  //    qv
  //==================================================50
  hipMemcpy(    d_qv_gpu[i],
                qv_cpu,
                dim_cpu.space_mem2,
                hipMemcpyHostToDevice);

  //====================================================================================================100
  //    GPU MEMORY                              (MALLOC) COPY
  //====================================================================================================100

  //==================================================50
  //    fv
  //==================================================50
  hipMemcpy(    d_fv_gpu[i], 
                fv_cpu, 
                dim_cpu.space_mem, 
                hipMemcpyHostToDevice);
  }
  printf("copy done\n");
  time3 = get_time();

  //======================================================================================================================================================150
  //    KERNEL
  //======================================================================================================================================================150
  int count = 1;
  // launch kernel - all boxes
  for (int i = 0; i < numStreams; i++) {
  m5_getKernelArg(reinterpret_cast<uintptr_t>(d_box_gpu[i]), reinterpret_cast<uintptr_t>(d_rv_gpu[i]), reinterpret_cast<uintptr_t>(d_qv_gpu[i]), 0, 3, count);  
  m5_getKernelArg(reinterpret_cast<uintptr_t>(d_fv_gpu[i]), 0, 0, 0, 1, count++);  
  hipLaunchKernelGGL(HIP_KERNEL_NAME(kernel_gpu_hip), dim3(blocks), dim3(threads), 0, hip_stream[i], /*0,*/        par_cpu,
                     dim_cpu,
                     /*(box_str*)NULL,*/d_box_gpu[i],
                     /*(FOUR_VECTOR*)NULL,*/d_rv_gpu[i],
                     /*(fp*)NULL,*/ d_qv_gpu[i],
                     /*(FOUR_VECTOR*)NULL);*/ d_fv_gpu[i]);
  }
  
  for (int i = 0; i < numStreams; i++) {
    hipHccModuleRingDoorbell(hip_stream[i]);
    hipStreamSynchronize(hip_stream[i]);
    m5_dump_reset_stats(0, 0);
  }
  printf("kernel done\n");
  checkHIPError("Start");
  // hipDeviceSynchronize();

  printf("kernel done\n");
  time4 = get_time();

  //======================================================================================================================================================150
  //    GPU MEMORY                      COPY (CONTD.)
  //======================================================================================================================================================150
  hipMemcpy(    fv_cpu, 
                d_fv_gpu[0], 
                dim_cpu.space_mem, 
                hipMemcpyDeviceToHost);

  time5 = get_time();

  //======================================================================================================================================================150
  //    GPU MEMORY DEALLOCATION
  //======================================================================================================================================================150
  for (int i = 0; i < numStreams; i++) {
    hipFree(d_rv_gpu[i]);
    hipFree(d_qv_gpu[i]);
    hipFree(d_fv_gpu[i]);
    hipFree(d_box_gpu[i]);
  }
  time6 = get_time();

  //======================================================================================================================================================150
  //    DISPLAY TIMING
  //======================================================================================================================================================150
  printf("Time spent in different stages of GPU_HIP KERNEL:\n");

  printf("%15.12f s, %15.12f percent : GPU: SET DEVICE / DRIVER INIT\n",      (float) (time1-time0) / 1000000, (float) (time1-time0) / (float) (time6-time0) * 100);
  printf("%15.12f s, %15.12f percent : GPU MEM: ALO\n",                       (float) (time2-time1) / 1000000, (float) (time2-time1) / (float) (time6-time0) * 100);
  printf("%15.12f s, %15.12f percent : GPU MEM: COPY IN\n",                   (float) (time3-time2) / 1000000, (float) (time3-time2) / (float) (time6-time0) * 100);

  printf("%15.12f s, %15.12f percent : GPU: KERNEL\n",                        (float) (time4-time3) / 1000000, (float) (time4-time3) / (float) (time6-time0) * 100);

  printf("%15.12f s, %15.12f percent : GPU MEM: COPY OUT\n",                  (float) (time5-time4) / 1000000, (float) (time5-time4) / (float) (time6-time0) * 100);
  printf("%15.12f s, %15.12f percent : GPU MEM: FREE\n",                      (float) (time6-time5) / 1000000, (float) (time6-time5) / (float) (time6-time0) * 100);

  printf("Total time:\n");
  printf("%.12f s\n",                                                         (float) (time6-time0) / 1000000);
}
