#ifndef KERNEL_GPU_HIP_WRAPPER_HIP_H_
#define KERNEL_GPU_HIP_WRAPPER_HIP_H_

/*
#ifdef __cplusplus
extern "C" {
#endif
*/

//========================================================================================================================================================================================================200
//      DEFINE/INCLUDE
//========================================================================================================================================================================================================200

//======================================================================================================================================================150
//      COMMON
//======================================================================================================================================================150
//#include "../common.h"                                                // (in main program directory)                  needed to recognized input variables
#include "hip/hip_runtime.h"
#include <gem5/m5ops.h>
//======================================================================================================================================================150
//      UTILITIES
//======================================================================================================================================================150
#include "../util/timer/timer.h"                                      // (in path specified to compiler)      needed by timer
#include "../util/hip/hip.h"

//======================================================================================================================================================150
//      KERNEL
//======================================================================================================================================================150
#include "./kernel_gpu_hip.h"                                         // (in current directory)       GPU kernel, cannot include with header file because of complications with passing of constant memory variables

//======================================================================================================================================================150
//      HEADER
//======================================================================================================================================================150
#include "./kernel_gpu_hip_wrapper.h"                                // (in current directory)

//========================================================================================================================================================================================================200
//      KERNEL_GPU_HIP_WRAPPER FUNCTION
//========================================================================================================================================================================================================200

void 
kernel_gpu_hip_wrapper(record *records,
                       long records_mem,
                       knode *knodes,
                       long knodes_elem,
                       long knodes_mem,

                       int order,
                       long maxheight,
                       int count,

                       long *currKnode,
                       long *offset,
                       int *keys,
                       record *ans)
{
  //======================================================================================================================================================150
  //    CPU VARIABLES
  //======================================================================================================================================================150

  // timer
  long long time0;
  long long time1;
  long long time2;
  long long time3;
  long long time4;
  long long time5;
  long long time6;

  time0 = get_time();

  //======================================================================================================================================================150
  //    GPU SETUP
  //======================================================================================================================================================150

  //====================================================================================================100
  //    INITIAL DRIVER OVERHEAD
  //====================================================================================================100
  hipDeviceSynchronize();

  //====================================================================================================100
  //    EXECUTION PARAMETERS
  //====================================================================================================100
  int numBlocks;
  numBlocks = count;                                                                    // max # of blocks can be 65,535
  int threadsPerBlock;
  threadsPerBlock = order < 1024 ? order : 1024;

  printf("# of blocks = %d, # of threads/block = %d (ensure that device can handle)\n", numBlocks, threadsPerBlock);

  time1 = get_time();

  //======================================================================================================================================================150
  //    GPU MEMORY                              (MALLOC)
  //======================================================================================================================================================150

  //====================================================================================================100
  //    DEVICE IN
  //====================================================================================================100

  //==================================================50
  //    recordsD
  //==================================================50
  record **recordsD;
  
  hipHostMalloc((void**)&recordsD, sizeof(record*)*numStreams);
  for (int i = 0; i < numStreams; ++i) { 
      hipHostMalloc((void**)&recordsD[i], records_mem);
  }
  checkHIPError("hipHostMalloc  recordsD");

  //==================================================50
  //    knodesD
  //==================================================50
  knode **knodesD;

  hipHostMalloc((void**)&knodesD, sizeof(knode*)*numStreams);
  for (int i = 0; i < numStreams; ++i) { 
      hipHostMalloc((void**)&knodesD[i], knodes_mem);
  }
  checkHIPError("hipHostMalloc  recordsD");

  //==================================================50
  //    currKnodeD
  //==================================================50
  long **currKnodeD;
  hipHostMalloc((void**)&currKnodeD, sizeof(long*)*numStreams);
  for (int i = 0; i < numStreams; ++i) { 
      hipHostMalloc((void**)&currKnodeD[i], knodes_mem);
  }
  checkHIPError("hipHostMalloc  currKnodeD");

  //==================================================50
  //    offsetD
  //==================================================50
  long **offsetD;
  hipHostMalloc((void**)&offsetD, sizeof(long*)*numStreams);
  for (int i = 0; i < numStreams; ++i) { 
      hipHostMalloc((void**)&offsetD[i], count*sizeof(long));
  }
  checkHIPError("hipHostMalloc  offsetD");

  //==================================================50
  //    keysD
  //==================================================50
  int **keysD;
  hipHostMalloc((void**)&keysD, sizeof(int*)*numStreams);
  for (int i = 0; i < numStreams; ++i) { 
      hipHostMalloc((void**)&keysD[i], count*sizeof(int));
  }
  checkHIPError("hipHostMalloc  keysD");

  //====================================================================================================100
  //    DEVICE IN/OUT
  //====================================================================================================100

  //==================================================50
  //    ansD
  //==================================================50
  record **ansD;
  hipHostMalloc((void**)&ansD, sizeof(record*)*numStreams);
  for (int i = 0; i < numStreams; ++i) { 
      hipHostMalloc((void**)&ansD[i], count*sizeof(record));
  }
  checkHIPError("hipHostMalloc ansD");

  time2 = get_time();

  //======================================================================================================================================================150
  //    GPU MEMORY                      COPY
  //======================================================================================================================================================150

  //====================================================================================================100
  //    GPU MEMORY                              (MALLOC) COPY IN
  //====================================================================================================100

  //==================================================50
  //    recordsD
  //==================================================50
  for (int i = 0; i < numStreams; ++i) { 
    hipMemcpy(recordsD[i], records, records_mem, hipMemcpyHostToDevice);
    checkHIPError("hipHostMalloc hipMemcpy memD");

    //==================================================50
    //    knodesD
    //==================================================50
    hipMemcpy(knodesD[i], knodes, knodes_mem, hipMemcpyHostToDevice);
    checkHIPError("hipHostMalloc hipMemcpy memD");

    //==================================================50
    //    currKnodeD
    //==================================================50
    hipMemcpy(currKnodeD[i], currKnode, count*sizeof(long), hipMemcpyHostToDevice);
    checkHIPError("hipHostMalloc hipMemcpy currKnodeD");

    //==================================================50
    //    offsetD
    //==================================================50
    hipMemcpy(offsetD[i], offset, count*sizeof(long), hipMemcpyHostToDevice);
    checkHIPError("hipHostMalloc hipMemcpy offsetD");

    //==================================================50
    //    keysD
    //==================================================50
    hipMemcpy(keysD[i], keys, count*sizeof(int), hipMemcpyHostToDevice);
    checkHIPError("hipHostMalloc hipMemcpy keysD");

    //====================================================================================================100
    //    DEVICE IN/OUT
    //====================================================================================================100

    //==================================================50
    //    ansD
    //==================================================50
    hipMemcpy(ansD[i], ans, count*sizeof(record), hipMemcpyHostToDevice);
    checkHIPError("hipHostMalloc hipMemcpy ansD");
  }
  time3 = get_time();

  //======================================================================================================================================================150
  // findK kernel
  //======================================================================================================================================================150
  int countKernel = 1;
  for (int i = 0; i < numStreams; ++i) {
  m5_getKernelArg(reinterpret_cast<uintptr_t>(knodesD[i]), reinterpret_cast<uintptr_t>(recordsD[i]), reinterpret_cast<uintptr_t>(currKnodeD[i]),  48, 3, countKernel);
  m5_getKernelArg(reinterpret_cast<uintptr_t>(offsetD[i]), reinterpret_cast<uintptr_t>(keysD[i]), reinterpret_cast<uintptr_t>(ansD[i]),  63, 3, countKernel++);
  hipLaunchKernelGGL_lk(findK, dim3(numBlocks), dim3(threadsPerBlock), 0, hip_stream[i], 0,         maxheight,
                                                                                  knodesD[i],
                                                                                  knodes_elem,

                                                                                  recordsD[i],

                                                                                  currKnodeD[i],
                                                                                  offsetD[i],
                                                                                  keysD[i],
                                                                                  ansD[i]);
  }
  
  for(int sm = 0; sm < numStreams; sm++) {
      hipHccModuleRingDoorbell(hip_stream[sm]);
  }

  for(int sm = 0; sm < numStreams; sm++) {
      hipStreamSynchronize(hip_stream[sm]);
  }
      m5_dump_reset_stats(0, 0);

  // hipDeviceSynchronize();
  checkHIPError("findK");

  time4 = get_time();

  //======================================================================================================================================================150
  //    GPU MEMORY                      COPY (CONTD.)
  //======================================================================================================================================================150

  //====================================================================================================100
  //    DEVICE IN/OUT
  //====================================================================================================100

  //==================================================50
  //    ansD
  //==================================================50
  hipMemcpy(ans, ansD[0], count*sizeof(record), hipMemcpyDeviceToHost);
  checkHIPError("hipMemcpy ansD");

  time5 = get_time();

  //======================================================================================================================================================150
  //    GPU MEMORY DEALLOCATION
  //======================================================================================================================================================150
  for (int i = 0; i < numStreams; ++i) { 
    hipFree(recordsD[i]);
    hipFree(knodesD[i]);

    hipFree(currKnodeD[i]);
    hipFree(offsetD[i]);
    hipFree(keysD[i]);
    hipFree(ansD[i]);
  }
  time6 = get_time();

  //======================================================================================================================================================150
  //    DISPLAY TIMING
  //======================================================================================================================================================150
  printf("Time spent in different stages of GPU_HIP KERNEL:\n");

  printf("%15.12f s, %15.12f percent : GPU: SET DEVICE / DRIVER INIT\n",
	 (float) (time1-time0) / 1000000,
	 (float) (time1-time0) / (float) (time6-time0) * 100);
  printf("%15.12f s, %15.12f percent : GPU MEM: ALO\n",
	 (float) (time2-time1) / 1000000,
	 (float) (time2-time1) / (float) (time6-time0) * 100);
  printf("%15.12f s, %15.12f percent : GPU MEM: COPY IN\n",
	 (float) (time3-time2) / 1000000,
	 (float) (time3-time2) / (float) (time6-time0) * 100);

  printf("%15.12f s, %15.12f percent : GPU: KERNEL\n",
	 (float) (time4-time3) / 1000000,
	 (float) (time4-time3) / (float) (time6-time0) * 100);

  printf("%15.12f s, %15.12f percent : GPU MEM: COPY OUT\n",
	 (float) (time5-time4) / 1000000,
	 (float) (time5-time4) / (float) (time6-time0) * 100);
  printf("%15.12f s, %15.12f percent : GPU MEM: FRE\n",
	 (float) (time6-time5) / 1000000,
	 (float) (time6-time5) / (float) (time6-time0) * 100);

  printf("Total time:\n");
  printf("%.12f s\n", (float) (time6-time0) / 1000000);

  //========================================================================================================================================================================================================200
  //    End
  //========================================================================================================================================================================================================200
}

  //========================================================================================================================================================================================================200
  //    END
  //========================================================================================================================================================================================================200

/*
#ifdef __cplusplus
}
#endif
*/

#endif
